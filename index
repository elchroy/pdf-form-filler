#!/usr/bin/env node

const readline = require("readline");
const pdfFiller = require("pdffiller");
const inquirer = require("inquirer");
const users = require("./src/data");
const userEmails = Object.keys(users);
const { log, error, info } = console;
const {
  welcomeMsg,
  noMatchMsg,
  infoMsg,
  readEmailMsg,
  selectedUserMsg,
  desFilePath,
  sourceFilePath,
  quitMsg,
  pdfGenerated
} = require("./src/helpers");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

log(welcomeMsg);

const recursiveRL = () => {
  rl.question(readEmailMsg, email => {
    email = email.trim().toLowerCase();
    if (["q", "quit"].includes(email)) {
      log(quitMsg);
      return rl.close();
    } else {
      const filteredEmails = userEmails.filter(userEmail =>
        userEmail.toLowerCase().includes(email.toLowerCase())
      );
      const len = filteredEmails.length;
      if (len === 0) {
        error(noMatchMsg(email));
        recursiveRL();
      } else {
        info(infoMsg(`${len} user(s) found!`));
        inquirer
          .prompt([
            {
              type: "list",
              name: "email",
              message: infoMsg("Select user (by email): "),
              choices: filteredEmails
            }
          ])
          .then(({ email }) => {
            info(selectedUserMsg(email));
            info(infoMsg(`Generating PDF for user with email - ${email}`));

            pdfFiller.fillForm(
              sourceFilePath,
              desFilePath(email),
              users[email],
              function(err) {
                if (err) throw err;
                info(pdfGenerated(email));
              }
            );
          });
      }
    }
  });
};

recursiveRL();
